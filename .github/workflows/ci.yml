name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION_DEFAULT: '3.11'

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run flake8 (critical errors only)
        run: |
          echo "Checking for critical syntax errors..."
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run flake8 (all issues, informational)
        continue-on-error: true
        run: |
          echo "Checking all code style issues..."
          flake8 src/ --count --max-complexity=10 --max-line-length=127 --statistics

      - name: Run mypy type checking
        continue-on-error: true
        run: |
          echo "Running type checking..."
          mypy src/ --ignore-missing-imports

      - name: Check code formatting with black
        continue-on-error: true
        run: |
          echo "Checking code formatting..."
          black --check --diff src/

      - name: Check import sorting with isort
        continue-on-error: true
        run: |
          echo "Checking import sorting..."
          isort --check-only --diff src/

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run unit tests
        run: |
          pytest -v --tb=short

      - name: Run tests with coverage
        if: matrix.python-version == env.PYTHON_VERSION_DEFAULT
        run: |
          pytest --cov=src --cov-report=xml --cov-report=term-missing

      - name: Test Makefile targets
        run: |
          echo "Testing make test target..."
          make test

      - name: Upload coverage reports to Codecov
        if: matrix.python-version == env.PYTHON_VERSION_DEFAULT
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.xml
          flags: unittests
          fail_ci_if_error: false